name: Build and Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment: pypi
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Importante per avere tutta la storia dei tag

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install git-cliff for changelog generation
        run: uv add --dev git-cliff

      - name: Generate full changelog
        run: uv run git-cliff --output CHANGELOG.md

      - name: Commit and push changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          if ! git diff --cached --quiet; then
            git commit -m "docs: update changelog for ${GITHUB_REF#refs/tags/}"
            git push origin HEAD:main
          else
            echo "No changes to changelog"
          fi

      - name: Install dependencies and build package
        run: |
          uv sync --all-groups
          uv build

      - name: Publish to PyPI
        run: uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Generate release notes for current tag
        run: |
          # Genera solo le note per il tag corrente (tra questo e il precedente)
          uv run git-cliff --latest --strip all > release_notes.md

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  build-linux:
#    runs-on: ubuntu-latest
#    needs: release
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install uv
#        uses: astral-sh/setup-uv@v6
#        with:
#          version: "latest"
#          enable-cache: true
#
#      - name: Set up Python
#        run: uv python install 3.12
#
#      - name: Install dependencies and build Linux executable
#        run: |
#          uv sync --all-groups
#          uv add --group dev pyinstaller
#          uv run pyinstaller --onefile --name pyliz-${{ github.ref_name }}-linux pylizlib/core/cli.py
#          if [ -f "pylizlib/qt/cli.py" ]; then
#            uv run pyinstaller --onefile --name qtliz-${{ github.ref_name }}-linux pylizlib/qt/cli.py
#          fi
#
#      - name: Upload Linux executable to release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: |
#            dist/pyliz-${{ github.ref_name }}-linux
#            dist/qtliz-${{ github.ref_name }}-linux
#          append_body: false
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  build-macos:
#    runs-on: macos-latest
#    needs: release
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install uv
#        uses: astral-sh/setup-uv@v6
#        with:
#          version: "latest"
#          enable-cache: true
#
#      - name: Set up Python
#        run: uv python install 3.12
#
#      - name: Install dependencies and build macOS executable
#        run: |
#          uv sync --all-groups
#          uv add --group dev pyinstaller
#          uv run pyinstaller --onefile --name pyliz-${{ github.ref_name }}-macos pylizlib/core/cli.py
#          if [ -f "pylizlib/qt/cli.py" ]; then
#            uv run pyinstaller --onefile --name qtliz-${{ github.ref_name }}-macos pylizlib/qt/cli.py
#          fi
#
#      - name: Upload macOS executable to release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: |
#            dist/pyliz-${{ github.ref_name }}-macos
#            dist/qtliz-${{ github.ref_name }}-macos
#          append_body: false
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  build-windows:
#    runs-on: windows-latest
#    needs: release
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install uv
#        uses: astral-sh/setup-uv@v6
#        with:
#          version: "latest"
#          enable-cache: true
#
#      - name: Set up Python
#        run: uv python install 3.12
#
#      - name: Install dependencies and build Windows executable
#        run: |
#          uv sync --all-groups
#          uv add --group dev pyinstaller
#          uv run pyinstaller --onefile --name pyliz-${{ github.ref_name }}-windows.exe pylizlib/core/cli.py
#          if (Test-Path "pylizlib/qt/cli.py") {
#            uv run pyinstaller --onefile --name qtliz-${{ github.ref_name }}-windows.exe pylizlib/qt/cli.py
#          }
#
#      - name: Upload Windows executable to release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: |
#            dist/pyliz-${{ github.ref_name }}-windows.exe
#            dist/qtliz-${{ github.ref_name }}-windows.exe
#          append_body: false
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
